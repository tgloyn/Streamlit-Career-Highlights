from helpers import *
import streamlit as st

st.set_page_config(page_title="Data Science Projects", page_icon=":bar_chart:", layout="wide")

# Custom CSS to reduce top padding and style header
st.markdown("""
    <style>
        /* Shrink top padding */
        .block-container {
            padding-top: 0.6rem !important;
            padding-bottom: 2rem !important;
        }
        /* Optional: remove extra header space (toolbar) */
        header[data-testid="stHeader"] {
            height: 0px;
            background: transparent;
        }
        /* Optional: hide menu & deploy button if you want it cleaner */
        /* div[data-testid="stToolbar"] { display: none !important; } */
    </style>
""", unsafe_allow_html=True)

headshot_and_title("Data Science Projects")

tabs = st.tabs(["üè¢ Toronto Apartment Recommendations",
                "üíª Virtual Care Appointments Trend",
                "üìä Emergency Department Trends Report",
                "üîé Patient Zone Classifier",
                "üéØ Patient Visit Volume Forecasting"])

with tabs[0]:
    ds_project_details(
        header="üè¢ Toronto Apartment Recommendations",
        provenance="""Coursera ‚Äî Python for Data Science and AI certification""",
        date="July 2020",
        description="A recommendation algorithm that helps users find apartments in Toronto based on their venue-location preferences. The algorithm uses neighbourhood location data and [Foursquare API](https://docs.foursquare.com/data-products/docs/categories) venue location information to provide personalized recommendations.",
        tech_used="Jupyter Notebook, Python, Pandas, NumPy, Scikit-learn (KMeans Clustering), GeoPy, Folium, Foursquare API",
        key_features="""
            - Neighbourhood location clustering using KMeans
            - Venue data retrieval from Foursquare API
            - User input for venue preferences (e.g., cafes, gyms, parks)
            - User preference matching and neighbourhood ranking""",
        github_link="https://github.com/tgloyn/coursera_materials"
    )

    st.image('assets/gta_venue_map.png', caption='Map of Toronto Venue Locations **Visualization purposes only, not generated by me**', use_container_width=False)

with tabs[1]:
    ds_project_details(
        header="üíª Virtual Care Appointments Trend",
        provenance="""Michener Capstone ‚Äî Advanced Diploma in Digital Health & Data Analytics""",
        date="Sept ‚Äî Dec 2023",
        description="Administration staff at UHN were interested in the continued adoption and usage trends of primary virtual care appointments.",
        tech_used="Jupyter Notebook, Python, Pandas, NumPy, Seaborn, Matplotlib, XGBoost",
        key_features="""
        - Analyzed 2 years of primary care appointment data (in-person vs virtual)
        - Time series visualizations to identify seasonal trends, stationarity, and anomalies
        - Forecasting future virtual care appointment volumes using XGBoost""",
        github_link="https://github.com/tgloyn/DHDA_Michener/blob/main/Group_5_Predicting_Virtual_Care_Volumes.ipynb"
    )

    st.image('assets/virtual_care_trend_ex.png', caption='XGBoost Forecasting Results', use_container_width=False)

with tabs[2]:
    ds_project_details(
        header="üìä Emergency Department Trends Report",
        provenance="""Research Assistant - Humber River Health (Internship)""",
        date="Jan ‚Äî Aug 2024",
        description="Providing emergency department administrators and healthcare staff with an exploratory data analysis report demonstrating historical and more recent patient visit volume and wait time trends. Used electronic health record (EHR) data.",
        tech_used="Python, Pandas, NumPy, Seaborn, Matplotlib, Folium, Scikit-learn (Linear Modelling)",
        key_features="""
        - Trends of daily patient volumes and wait-times across 10 years of service, highlighting COVID-19 impact
        - Zone specific temporal day of week and hour of day staffing/patient arrivals/wait time trends 
        - Generated Linear model demonstrating complaint-specific wait time coefficients per zone 
                        """,
        github_link="NaN" # No public repo available
    )
    st.warning("Samples are for illustrative purposes only; data is confidential and not publicly shareable.")
    st.image('assets/CI sample 1.png', caption='Example Visual from Report', use_container_width=False)
    st.image('assets/CI sample 2.png', caption='Example Visual from Report', use_container_width=False)

with tabs[3]:
    ds_project_details(
        header="üîé Patient Zone Classifier",
        provenance="""Data Scientist, Research ‚Äî Humber River Health""",
        date="Aug ‚Äî Dec 2024",
        description="Designing a classification model to predict low-acuity patients in the Fast-Track zone using EHR data at triage.",
        tech_used="Python, Pandas, NumPy, Sentence Transformers, Scikit-learn, XGBoost, Seaborn, Matplotlib",
        key_features="""
        - Incorporates information gleaned from patient triage to predict Fast-Track eligibility.
        - Utilizes advanced NLP techniques (**Huggingface Transformers**) to analyze unstructured notes.
                        """,
        github_link="NaN"
    )
    st.warning("Samples are for illustrative purposes only; data is confidential and not publicly shareable.")
    vis_1, vis_2 = st.columns(2)
    with vis_1:
        st.image('assets/patient_classifier_roc_curve.png', caption='ROC Curve from Patient Classifier', use_container_width=True)
    with vis_2:
        st.image('assets/patient_classifier_conf_matrix.png', caption='Confusion Matrix Results', use_container_width=True)

with tabs[4]:
    ds_project_details(
        header="üéØ Patient Visit Volume Forecasting",
        provenance="""Data Scientist, Research ‚Äî Humber River Health""",
        date="Jan ‚Äî Sept 2025",
        description="Using hourly patient queue data to forecast patient volumes up to 3 hours into the future. Exploratory comparative analysis of multiple time-series and machine learning models. Model forecasts are intended to be used in conjunction with a wait time forecast for accurate ED surge alert thresholding and resource planning.",
        tech_used="Python, Pandas, NumPy, SARIMA/SARIMAX, XGBoost, LightGBM, Tensorflow (LSTM, Variational Autoencoder), Scikit-learn, Streamlit, Plotly, Optuna",
        key_features="""
        - Comparative analysis of multiple time-series and ML models for short-term patient arrival forecasting. 
        - Investigating the influence of **external factors** (weather, air quality, holidays, time of day/week, etc.) on forecast accuracy.
        - Hyperparameter tuning using **Bayesian optimization (Optuna)** to maximize model performance.
        - Developed an interactive **Streamlit** app to visualize model forecasts and performance metrics.
                        """,
        github_link="NaN"
    )
    st.warning("Samples are for illustrative purposes only; data is confidential and not publicly shareable.")
    
